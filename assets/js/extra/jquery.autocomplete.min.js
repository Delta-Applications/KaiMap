!(function (e) {
  "use strict";
  "function" == typeof define && define.amd
    ? define(["jquery"], e)
    : "object" == typeof exports && "function" == typeof require
    ? e(require("jquery"))
    : e(jQuery);
})(function (p) {
  "use strict";
  var o = {
      escapeRegExChars: function (e) {
        return e.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&");
      },
      createNode: function (e) {
        var t = document.createElement("div");
        return (
          (t.className = e),
          (t.style.position = "absolute"),
          (t.style.display = "none"),
          t
        );
      },
    },
    n = 27,
    s = 9,
    i = 13,
    a = 38,
    u = 39,
    l = 40,
    e = p.noop;
  function r(e, t) {
    var n = this;
    (n.element = e),
      (n.el = p(e)),
      (n.suggestions = []),
      (n.badQueries = []),
      (n.selectedIndex = -1),
      (n.currentValue = n.element.value),
      (n.timeoutId = null),
      (n.cachedResponse = {}),
      (n.onChangeTimeout = null),
      (n.onChange = null),
      (n.isLocal = !1),
      (n.suggestionsContainer = null),
      (n.noSuggestionsContainer = null),
      (n.options = p.extend(!0, {}, r.defaults, t)),
      (n.classes = {
        selected: "autocomplete-selected",
        suggestion: "autocomplete-suggestion",
      }),
      (n.hint = null),
      (n.hintValue = ""),
      (n.selection = null),
      n.initialize(),
      n.setOptions(t);
  }
  (r.utils = o),
    ((p.Autocomplete = r).defaults = {
      ajaxSettings: {},
      autoSelectFirst: !1,
      appendTo: "body",
      serviceUrl: null,
      lookup: null,
      onSelect: null,
      width: "auto",
      minChars: 1,
      maxHeight: 300,
      deferRequestBy: 0,
      params: {},
      formatResult: function (e, t) {
        if (!t) return e.value;
        var n = "(" + o.escapeRegExChars(t) + ")";
        return e.value
          .replace(new RegExp(n, "gi"), "<strong>$1</strong>")
          .replace(/&/g, "&amp;")
          .replace(/</g, "&lt;")
          .replace(/>/g, "&gt;")
          .replace(/"/g, "&quot;")
          .replace(/&lt;(\/?strong)&gt;/g, "<$1>");
      },
      formatGroup: function (e, t) {
        return '<div class="autocomplete-group">' + t + "</div>";
      },
      delimiter: null,
      zIndex: 9999,
      type: "GET",
      noCache: !1,
      onSearchStart: e,
      onSearchComplete: e,
      onSearchError: e,
      preserveInput: !1,
      containerClass: "autocomplete-suggestions",
      tabDisabled: !1,
      dataType: "text",
      currentRequest: null,
      triggerSelectOnValidInput: !0,
      preventBadQueries: !0,
      lookupFilter: function (e, t, n) {
        return -1 !== e.value.toLowerCase().indexOf(n);
      },
      paramName: "query",
      transformResult: function (e) {
        return "string" == typeof e ? p.parseJSON(e) : e;
      },
      showNoSuggestionNotice: !1,
      noSuggestionNotice: "No results",
      orientation: "bottom",
      forceFixPosition: !1,
    }),
    (r.prototype = {
      initialize: function () {
        var e,
          t = this,
          n = "." + t.classes.suggestion,
          o = t.classes.selected,
          s = t.options;
        t.element.setAttribute("autocomplete", "off"),
          (t.noSuggestionsContainer = p(
            '<div class="autocomplete-no-suggestion"></div>'
          )
            .html(this.options.noSuggestionNotice)
            .get(0)),
          (t.suggestionsContainer = r.utils.createNode(s.containerClass)),
          (e = p(t.suggestionsContainer)).appendTo(s.appendTo || "body"),
          "auto" !== s.width && e.css("width", s.width),
          e.on("mouseover.autocomplete", n, function () {
            t.activate(p(this).data("index"));
          }),
          e.on("mouseout.autocomplete", function () {
            (t.selectedIndex = -1), e.children("." + o).removeClass(o);
          }),
          e.on("click.autocomplete", n, function () {
            t.select(p(this).data("index"));
          }),
          e.on("click.autocomplete", function () {
            clearTimeout(t.blurTimeoutId);
          }),
          (t.fixPositionCapture = function () {
            t.visible && t.fixPosition();
          }),
          p(window).on("resize.autocomplete", t.fixPositionCapture),
          t.el.on("keydown.autocomplete", function (e) {
            t.onKeyPress(e);
          }),
          t.el.on("keyup.autocomplete", function (e) {
            t.onKeyUp(e);
          }),
          t.el.on("blur.autocomplete", function () {
            t.onBlur();
          }),
          t.el.on("focus.autocomplete", function () {
            t.onFocus();
          }),
          t.el.on("change.autocomplete", function (e) {
            t.onKeyUp(e);
          }),
          t.el.on("input.autocomplete", function (e) {
            t.onKeyUp(e);
          });
      },
      onFocus: function () {
        var e = this;
        e.disabled ||
          (e.fixPosition(),
          e.el.val().length >= e.options.minChars && e.onValueChange());
      },
      onBlur: function () {
        var e = this,
          t = e.options,
          n = e.el.val(),
          o = e.getQuery(n);
        e.blurTimeoutId = setTimeout(function () {
          e.hide(),
            e.selection &&
              e.currentValue !== o &&
              (t.onInvalidateSelection || p.noop).call(e.element);
        }, 200);
      },
      abortAjax: function () {
        var e = this;
        e.currentRequest &&
          (e.currentRequest.abort(), (e.currentRequest = null));
      },
      setOptions: function (e) {
        var t = this,
          n = p.extend({}, t.options, e);
        (t.isLocal = Array.isArray(n.lookup)),
          t.isLocal && (n.lookup = t.verifySuggestionsFormat(n.lookup)),
          (n.orientation = t.validateOrientation(n.orientation, "bottom")),
          p(t.suggestionsContainer).css({
            "max-height": n.maxHeight + "px",
            width: n.width + "px",
            "z-index": n.zIndex,
          }),
          (this.options = n);
      },
      clearCache: function () {
        (this.cachedResponse = {}), (this.badQueries = []);
      },
      clear: function () {
        this.clearCache(), (this.currentValue = ""), (this.suggestions = []);
      },
      disable: function () {
        var e = this;
        (e.disabled = !0), clearTimeout(e.onChangeTimeout), e.abortAjax();
      },
      enable: function () {
        this.disabled = !1;
      },
      fixPosition: function () {
        var e = this,
          t = p(e.suggestionsContainer),
          n = t.parent().get(0);
        if (n === document.body || e.options.forceFixPosition) {
          var o = e.options.orientation,
            s = t.outerHeight(),
            i = e.el.outerHeight(),
            a = e.el.offset(),
            u = { top: a.top, left: a.left };
          if ("auto" === o) {
            var l = p(window).height(),
              r = p(window).scrollTop(),
              c = -r + a.top - s,
              g = r + l - (a.top + i + s);
            o = Math.max(c, g) === c ? "top" : "bottom";
          }
          if (((u.top += "top" === o ? -s : i), n !== document.body)) {
            var d,
              h = t.css("opacity");
            e.visible || t.css("opacity", 0).show(),
              (d = t.offsetParent().offset()),
              (u.top -= d.top),
              (u.top += n.scrollTop),
              (u.left -= d.left),
              e.visible || t.css("opacity", h).hide();
          }
          "auto" === e.options.width && (u.width = e.el.outerWidth() + "px"),
            t.css(u);
        }
      },
      isCursorAtEnd: function () {
        var e,
          t = this.el.val().length,
          n = this.element.selectionStart;
        return "number" == typeof n
          ? n === t
          : !document.selection ||
              ((e = document.selection.createRange()).moveStart(
                "character",
                -t
              ),
              t === e.text.length);
      },
      onKeyPress: function (e) {
        var t = this;
        if (t.disabled || t.visible || e.which !== l || !t.currentValue) {
          if (!t.disabled && t.visible) {
            switch (e.which) {
              case n:
                t.el.val(t.currentValue), t.hide();
                break;
              case u:
                if (t.hint && t.options.onHint && t.isCursorAtEnd()) {
                  t.selectHint();
                  break;
                }
                return;
              case s:
                if (t.hint && t.options.onHint) return void t.selectHint();
                if (-1 === t.selectedIndex) return void t.hide();
                if ((t.select(t.selectedIndex), !1 === t.options.tabDisabled))
                  return;
                break;
              case i:
                if (-1 === t.selectedIndex) return void t.hide();
                t.select(t.selectedIndex);
                break;
              case a:
                t.moveUp();
                break;
              case l:
                t.moveDown();
                break;
              default:
                return;
            }
            e.stopImmediatePropagation(), e.preventDefault();
          }
        } else t.suggest();
      },
      onKeyUp: function (e) {
        var t = this;
        if (!t.disabled) {
          switch (e.which) {
            case a:
            case l:
              return;
          }
          clearTimeout(t.onChangeTimeout),
            t.currentValue !== t.el.val() &&
              (t.findBestHint(),
              0 < t.options.deferRequestBy
                ? (t.onChangeTimeout = setTimeout(function () {
                    t.onValueChange();
                  }, t.options.deferRequestBy))
                : t.onValueChange());
        }
      },
      onValueChange: function () {
        if (this.ignoreValueChange) this.ignoreValueChange = !1;
        else {
          var e = this,
            t = e.options,
            n = e.el.val(),
            o = e.getQuery(n);
          e.selection &&
            e.currentValue !== o &&
            ((e.selection = null),
            (t.onInvalidateSelection || p.noop).call(e.element)),
            clearTimeout(e.onChangeTimeout),
            (e.currentValue = n),
            (e.selectedIndex = -1),
            t.triggerSelectOnValidInput && e.isExactMatch(o)
              ? e.select(0)
              : o.length < t.minChars
              ? e.hide()
              : e.getSuggestions(o);
        }
      },
      isExactMatch: function (e) {
        var t = this.suggestions;
        return 1 === t.length && t[0].value.toLowerCase() === e.toLowerCase();
      },
      getQuery: function (e) {
        var t,
          n = this.options.delimiter;
        return n ? ((t = e.split(n)), p.trim(t[t.length - 1])) : e;
      },
      getSuggestionsLocal: function (t) {
        var e,
          n = this.options,
          o = t.toLowerCase(),
          s = n.lookupFilter,
          i = parseInt(n.lookupLimit, 10);
        return (
          (e = {
            suggestions: p.grep(n.lookup, function (e) {
              return s(e, t, o);
            }),
          }),
          i &&
            e.suggestions.length > i &&
            (e.suggestions = e.suggestions.slice(0, i)),
          e
        );
      },
      getSuggestions: function (o) {
        var e,
          t,
          n,
          s,
          i = this,
          a = i.options,
          u = a.serviceUrl;
        (a.params[a.paramName] = o),
          !1 !== a.onSearchStart.call(i.element, a.params) &&
            ((t = a.ignoreParams ? null : a.params),
            p.isFunction(a.lookup)
              ? a.lookup(o, function (e) {
                  (i.suggestions = e.suggestions),
                    i.suggest(),
                    a.onSearchComplete.call(i.element, o, e.suggestions);
                })
              : (e = i.isLocal
                  ? i.getSuggestionsLocal(o)
                  : (p.isFunction(u) && (u = u.call(i.element, o)),
                    (n = u + "?" + p.param(t || {})),
                    i.cachedResponse[n])) && Array.isArray(e.suggestions)
              ? ((i.suggestions = e.suggestions),
                i.suggest(),
                a.onSearchComplete.call(i.element, o, e.suggestions))
              : i.isBadQuery(o)
              ? a.onSearchComplete.call(i.element, o, [])
              : (i.abortAjax(),
                (s = { url: u, data: t, type: a.type, dataType: a.dataType }),
                p.extend(s, a.ajaxSettings),
                (i.currentRequest = p
                  .ajax(s)
                  .done(function (e) {
                    var t;
                    (i.currentRequest = null),
                      (t = a.transformResult(e, o)),
                      i.processResponse(t, o, n),
                      a.onSearchComplete.call(i.element, o, t.suggestions);
                  })
                  .fail(function (e, t, n) {
                    a.onSearchError.call(i.element, o, e, t, n);
                  }))));
      },
      isBadQuery: function (e) {
        if (!this.options.preventBadQueries) return !1;
        for (var t = this.badQueries, n = t.length; n--; )
          if (0 === e.indexOf(t[n])) return !0;
        return !1;
      },
      hide: function () {
        var e = this,
          t = p(e.suggestionsContainer);
        p.isFunction(e.options.onHide) &&
          e.visible &&
          e.options.onHide.call(e.element, t),
          (e.visible = !1),
          (e.selectedIndex = -1),
          clearTimeout(e.onChangeTimeout),
          p(e.suggestionsContainer).hide(),
          e.signalHint(null);
      },
      suggest: function () {
        if (this.suggestions.length) {
          var n,
            e = this,
            o = e.options,
            s = o.groupBy,
            i = o.formatResult,
            a = e.getQuery(e.currentValue),
            u = e.classes.suggestion,
            t = e.classes.selected,
            l = p(e.suggestionsContainer),
            r = p(e.noSuggestionsContainer),
            c = o.beforeRender,
            g = "";
          o.triggerSelectOnValidInput && e.isExactMatch(a)
            ? e.select(0)
            : (p.each(e.suggestions, function (e, t) {
                s &&
                  (g += (function (e) {
                    var t = e.data[s];
                    return n === t ? "" : ((n = t), o.formatGroup(e, n));
                  })(t, 0)),
                  (g +=
                    '<div class="' +
                    u +
                    '" data-index="' +
                    e +
                    '">' +
                    i(t, a, e) +
                    "</div>");
              }),
              this.adjustContainerWidth(),
              r.detach(),
              l.html(g),
              p.isFunction(c) && c.call(e.element, l, e.suggestions),
              e.fixPosition(),
              l.show(),
              o.autoSelectFirst &&
                ((e.selectedIndex = 0),
                l.scrollTop(0),
                l
                  .children("." + u)
                  .first()
                  .addClass(t)),
              (e.visible = !0),
              e.findBestHint());
        } else
          this.options.showNoSuggestionNotice
            ? this.noSuggestions()
            : this.hide();
      },
      noSuggestions: function () {
        var e = this,
          t = e.options.beforeRender,
          n = p(e.suggestionsContainer),
          o = p(e.noSuggestionsContainer);
        this.adjustContainerWidth(),
          o.detach(),
          n.empty(),
          n.append(o),
          p.isFunction(t) && t.call(e.element, n, e.suggestions),
          e.fixPosition(),
          n.show(),
          (e.visible = !0);
      },
      adjustContainerWidth: function () {
        var e,
          t = this.options,
          n = p(this.suggestionsContainer);
        "auto" === t.width
          ? ((e = this.el.outerWidth()), n.css("width", 0 < e ? e : 300))
          : "flex" === t.width && n.css("width", "");
      },
      findBestHint: function () {
        var o = this.el.val().toLowerCase(),
          s = null;
        o &&
          (p.each(this.suggestions, function (e, t) {
            var n = 0 === t.value.toLowerCase().indexOf(o);
            return n && (s = t), !n;
          }),
          this.signalHint(s));
      },
      signalHint: function (e) {
        var t = "",
          n = this;
        e && (t = n.currentValue + e.value.substr(n.currentValue.length)),
          n.hintValue !== t &&
            ((n.hintValue = t),
            (n.hint = e),
            (this.options.onHint || p.noop)(t));
      },
      verifySuggestionsFormat: function (e) {
        return e.length && "string" == typeof e[0]
          ? p.map(e, function (e) {
              return { value: e, data: null };
            })
          : e;
      },
      validateOrientation: function (e, t) {
        return (
          (e = p.trim(e || "").toLowerCase()),
          -1 === p.inArray(e, ["auto", "bottom", "top"]) && (e = t),
          e
        );
      },
      processResponse: function (e, t, n) {
        var o = this,
          s = o.options;
        (e.suggestions = o.verifySuggestionsFormat(e.suggestions)),
          s.noCache ||
            ((o.cachedResponse[n] = e),
            s.preventBadQueries &&
              !e.suggestions.length &&
              o.badQueries.push(t)),
          t === o.getQuery(o.currentValue) &&
            ((o.suggestions = e.suggestions), o.suggest());
      },
      activate: function (e) {
        var t,
          n = this,
          o = n.classes.selected,
          s = p(n.suggestionsContainer),
          i = s.find("." + n.classes.suggestion);
        return (
          s.find("." + o).removeClass(o),
          (n.selectedIndex = e),
          -1 !== n.selectedIndex && i.length > n.selectedIndex
            ? ((t = i.get(n.selectedIndex)), p(t).addClass(o), t)
            : null
        );
      },
      selectHint: function () {
        var e = p.inArray(this.hint, this.suggestions);
        this.select(e);
      },
      select: function (e) {
        this.hide(), this.onSelect(e);
      },
      moveUp: function () {
        var e = this;
        if (-1 !== e.selectedIndex)
          return 0 === e.selectedIndex
            ? (p(e.suggestionsContainer)
                .children("." + e.classes.suggestion)
                .first()
                .removeClass(e.classes.selected),
              (e.selectedIndex = -1),
              (e.ignoreValueChange = !1),
              e.el.val(e.currentValue),
              void e.findBestHint())
            : void e.adjustScroll(e.selectedIndex - 1);
      },
      moveDown: function () {
        this.selectedIndex !== this.suggestions.length - 1 &&
          this.adjustScroll(this.selectedIndex + 1);
      },
      adjustScroll: function (e) {
        var t = this,
          n = t.activate(e);
        if (n) {
          var o,
            s,
            i,
            a = p(n).outerHeight();
          (o = n.offsetTop),
            (i =
              (s = p(t.suggestionsContainer).scrollTop()) +
              t.options.maxHeight -
              a),
            o < s
              ? p(t.suggestionsContainer).scrollTop(o)
              : i < o &&
                p(t.suggestionsContainer).scrollTop(
                  o - t.options.maxHeight + a
                ),
            t.options.preserveInput ||
              ((t.ignoreValueChange = !0),
              t.el.val(t.getValue(t.suggestions[e].value))),
            t.signalHint(null);
        }
      },
      onSelect: function (e) {
        var t = this,
          n = t.options.onSelect,
          o = t.suggestions[e];
        (t.currentValue = t.getValue(o.value)),
          t.currentValue === t.el.val() ||
            t.options.preserveInput ||
            t.el.val(t.currentValue),
          t.signalHint(null),
          (t.suggestions = []),
          (t.selection = o),
          p.isFunction(n) && n.call(t.element, o);
      },
      getValue: function (e) {
        var t,
          n,
          o = this.options.delimiter;
        return o
          ? 1 === (n = (t = this.currentValue).split(o)).length
            ? e
            : t.substr(0, t.length - n[n.length - 1].length) + e
          : e;
      },
      dispose: function () {
        this.el.off(".autocomplete").removeData("autocomplete"),
          p(window).off("resize.autocomplete", this.fixPositionCapture),
          p(this.suggestionsContainer).remove();
      },
    }),
    (p.fn.devbridgeAutocomplete = function (n, o) {
      var s = "autocomplete";
      return arguments.length
        ? this.each(function () {
            var e = p(this),
              t = e.data(s);
            "string" == typeof n
              ? t && "function" == typeof t[n] && t[n](o)
              : (t && t.dispose && t.dispose(),
                (t = new r(this, n)),
                e.data(s, t));
          })
        : this.first().data(s);
    }),
    p.fn.autocomplete || (p.fn.autocomplete = p.fn.devbridgeAutocomplete);
});
